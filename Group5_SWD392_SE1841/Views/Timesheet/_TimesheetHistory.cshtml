@model List<Timesheet>

@{
    ViewBag.Title = "Timesheet History";
}

<style>

    .header-section {
        background: var(--primary-gradient);
        color: white;
    }

    .date-navigation {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        position: -webkit-sticky; /* Safari */
        position: sticky;
        top: 0;
        z-index: 1000;
        padding: 1rem;
    }
    .date-header {
        background: linear-gradient(90deg, #f8f9fa 0%, #e9ecef 100%);
        border-left: 4px solid #667eea;
    }

    .time-entry-card {
        transition: all 0.3s ease;
        border-left: 4px solid transparent;
    }

        .time-entry-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

    .project-website-redesign {
        border-left-color: #0d6efd;
    }

    .project-mobile-app-development {
        border-left-color: #198754;
    }

    .project-database-migration {
        border-left-color: #fd7e14;
    }

    .project-client-portal {
        border-left-color: #dc3545;
    }

    .project-api-development {
        border-left-color: #6f42c1;
    }

    .status-pending {
        color: var(--warning-color);
    }

    .status-accepted {
        color: var(--success-color);
    }

    .status-rejected {
        color: var(--danger-color);
    }

    .total-hours {
        font-weight: 700;
        font-size: 1.1em;
    }

    .date-navigation {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .calendar-mini {
        font-size: 0.85em;
    }

        .calendar-mini .btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }

    .time-badge {
        font-family: 'Courier New', monospace;
        font-weight: bold;
    }

    .summary-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        transition: transform 0.3s ease;
    }

        .summary-card:hover {
            transform: translateY(-5px);
        }

    .modal-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

        .modal-header .btn-close {
            filter: invert(1);
        }

    .form-label {
        font-weight: 600;
        color: #495057;
    }

    .form-control:focus, .form-select:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .time-input-group {
        position: relative;
    }

        .time-input-group .form-control {
            padding-left: 2.5rem;
        }

        .time-input-group .input-group-text {
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            z-index: 4;
            border-right: none;
            background: transparent;
            border-color: #ced4da;
        }

    .task-option {
        padding: 0.5rem;
        border-radius: 0.375rem;
        margin-bottom: 0.25rem;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .task-option:hover {
            background-color: #f8f9fa;
        }

        .task-option.selected {
            background-color: #667eea;
            color: white;
        }

    .project-badge {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
    }

    .duration-display {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        padding: 0.75rem;
        font-weight: 600;
        color: #495057;
    }

    .required-field::after {
        content: " *";
        color: #dc3545;
    }

    .modal-footer {
        border-top: 2px solid #f8f9fa;
    }

    .time-inputs .col-md-6 {
        margin-bottom: 1rem;
    }
</style>

<div class="header-section py-4 mb-4">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-lg-6">
                <h1 class="mb-1"><i class="bi bi-calendar-week me-2"></i>Timesheet History</h1>
                <p class="mb-0 opacity-75">Date-based view of your work entries</p>
            </div>
            <div class="col-lg-6 text-lg-end mt-3 mt-lg-0">
                <button class="btn btn-outline-light me-2">
                    <i class="bi bi-download me-1"></i>Export
                </button>
                <button class="btn btn-light" data-bs-toggle="modal" data-bs-target="#timesheetModal" onclick="prepareAddForm()">
                    <i class="bi bi-plus-circle me-1"></i>New Entry
                </button>
            </div>
        </div>
    </div>
    @await Html.PartialAsync("_TimesheetModal")
</div>

<div class="container">
    <div class="row mb-4">
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="summary-card p-4 text-center">
                <i class="bi bi-clock-history text-primary fs-1 mb-2"></i>
                <h3 class="total-hours text-primary">@ViewBag.Summary.HoursThisWeek</h3>
                <p class="text-muted mb-0">Hours This Week</p>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="summary-card p-4 text-center">
                <i class="bi bi-calendar-check text-success fs-1 mb-2"></i>
                <h3 class="total-hours text-success">@ViewBag.Summary.HoursThisMonth</h3>
                <p class="text-muted mb-0">Hours This Month</p>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="summary-card p-4 text-center">
                <i class="bi bi-graph-up text-info fs-1 mb-2"></i>
                <h3 class="total-hours text-info">@ViewBag.Summary.AverageHoursPerDay.ToString("0.0")</h3>
                <p class="text-muted mb-0">Avg Hours/Day</p>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="summary-card p-4 text-center">
                <i class="bi bi-trophy text-warning fs-1 mb-2"></i>
                <h3 class="total-hours text-warning">@ViewBag.Summary.ApprovalRate%</h3>
                <p class="text-muted mb-0">Approval Rate</p>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-3 mb-4">
            <div class="date-navigation p-4 position-sticky">
                <h5 class="mb-3"><i class="bi bi-calendar3 me-2"></i>Navigate Dates</h5>
                <div class="mb-4">
                    <label class="form-label fw-bold">Quick Select</label>
                    <div class="d-grid gap-2">
                        <button class="btn btn-outline-primary btn-sm @(ViewBag.StartDate == DateTime.Today.ToString("yyyy-MM-dd") && ViewBag.EndDate == DateTime.Today.ToString("yyyy-MM-dd") ? "active" : "")" onclick="window.location.href='@Url.Action("ManageTimesheet", new { startDate = DateTime.Today, endDate = DateTime.Today })'">Today</button>
                        <button class="btn btn-outline-primary btn-sm" onclick="window.location.href='@Url.Action("ManageTimesheet", new { startDate = DateTime.Today.AddDays(-1), endDate = DateTime.Today.AddDays(-1) })'">Yesterday</button>
                        <button class="btn btn-outline-primary btn-sm" onclick="window.location.href='@Url.Action("ManageTimesheet", new { startDate = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek), endDate = DateTime.Today.AddDays(6 - (int)DateTime.Today.DayOfWeek) })'">This Week</button>
                        <button class="btn btn-outline-primary btn-sm" onclick="window.location.href='@Url.Action("ManageTimesheet", new { startDate = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek - 7), endDate = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek - 1) })'">Last Week</button>
                        <button class="btn btn-outline-primary btn-sm" onclick="window.location.href='@Url.Action("ManageTimesheet", new { startDate = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1), endDate = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddMonths(1).AddDays(-1) })'">This Month</button>
                    </div>
                </div>
                <form method="get" action="@Url.Action("ManageTimesheet")">
                    <div class="mb-4">
                        <label class="form-label fw-bold">Custom Range</label>
                        <div class="row g-2">
                            <div class="col-12">
                                <input type="date" class="form-control form-control-sm" name="startDate" value="@ViewBag.StartDate">
                            </div>
                            <div class="col-12">
                                <input type="date" class="form-control form-control-sm" name="endDate" value="@ViewBag.EndDate">
                            </div>
                            <div class="col-12">
                                <button type="submit" class="btn btn-primary btn-sm w-100">Apply Range</button>
                            </div>
                        </div>
                    </div>
                    <div class="mt-4">
                        <h6 class="fw-bold mb-2">Filters</h6>
                        <div class="mb-2">
                            <label class="form-label">Project</label>
                            <select class="form-select form-select-sm" name="projectId">
                                <option value="">All Projects</option>
                                @if (ViewBag.ProjectList != null)
                                {
                                    @foreach (var project in ViewBag.ProjectList)
                                    {
                                        <option value="@project.ProjectId" selected="@(ViewBag.SelectedProjectIdFilter == project.ProjectId ? "selected" : null)">
                                            @project.ProjectName
                                        </option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="mb-2">
                            <label for="taskId" class="form-label">Task</label>
                            <select class="form-select form-select-sm" name="taskId">
                                <option value="">All Tasks</option>
                                
                                @foreach (var task in ViewBag.Tasks)  
                                {  
                                    <option value="@task.TaskId" selected="@(ViewBag.SelectedTaskId == task.TaskId ? "selected" : null)">@task.TaskName (@task.ProjectName)</option>  
                                }
                            </select>
                        </div>
                        <div class="mb-2">
                            <label for="workStatusId" class="form-label">Status</label>
                            <select class="form-select form-select-sm" name="workStatusId">
                                @foreach (var status in ViewBag.WorkStatuses)
                                {
                                    <option value="@status.WorkStatusId" selected="@(ViewBag.SelectedWorkStatusId == status.WorkStatusId ? "selected" : null)">@status.StatusName</option>
                                }
                            </select>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <div class="col-lg-9">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-body">
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                        <input type="text" class="form-control" id="searchInput" placeholder="Search by task or description...">
                        <button class="btn btn-outline-secondary" type="button">Search</button>
                    </div>
                </div>
            </div>

            @foreach (var dateGroup in Model.GroupBy(t => t.StartTime.Date))
            {
                var totalHours = dateGroup.Sum(t => t.EndTime.HasValue ? (t.EndTime.Value - t.StartTime).TotalHours : 0);
                var allAccepted = dateGroup.All(t => t.WorkStatusId == 1);
                <div class="mb-4">
                    <div class="date-header p-3 mb-3">
                        <div class="row align-items-center">
                            <div class="col">
                                <h4 class="mb-0">@dateGroup.Key.ToString("dddd, MMMM dd, yyyy")</h4>
                                <small class="text-muted">@dateGroup.Count() entries • @totalHours.ToString("0.0") total hours</small>
                            </div>
                            <div class="col-auto">
                                <span class="badge bg-@(allAccepted ? "success" : "warning")">@(allAccepted ? "All Accepted" : "Mixed Status")</span>
                            </div>
                        </div>
                    </div>
                    @foreach (var entry in dateGroup)
                    {
                        var statusClass = entry.WorkStatusId switch
                        {
                            0 => "warning",
                            1 => "success",
                            2 => "danger",
                            _ => "secondary"
                        };
                        <div class="time-entry-card project-@entry.Task.Project.ProjectName.ToLower().Replace(" ", "-") card border-0 shadow-sm mb-3">
                            <div class="card-body">
                                <div class="row align-items-center">
                                    <div class="col-lg-8">
                                        <div class="d-flex align-items-center mb-2">
                                            <span class="badge bg-primary me-2">@entry.Task.Project.ProjectName</span>
                                            <h6 class="mb-0">@entry.Task.TaskName</h6>
                                        </div>
                                        <p class="text-muted mb-2 time-entry-details">@entry.Notes</p>
                                        <div class="row g-2 time-entry-details">
                                            <div class="col-auto">
                                                <small class="text-muted">
                                                    <i class="bi bi-clock me-1"></i>
                                                    <span class="time-badge">@entry.StartTime.ToString("hh:mm tt")</span> - <span class="time-badge">@(entry.EndTime?.ToString("hh:mm tt") ?? "N/A")</span>
                                                </small>
                                            </div>
                                            <div class="col-auto">
                                                <small class="text-muted">
                                                    <i class="bi bi-person me-1"></i>@entry.Employee.EmployeeName
                                                </small>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-4 text-lg-end">
                                        <div class="mb-2">
                                            <span class="total-hours text-primary fs-4">@(entry.EndTime.HasValue ? (entry.EndTime.Value - entry.StartTime).TotalHours.ToString("0.0") : "0.0")</span>
                                            <small class="text-muted">hours</small>
                                        </div>
                                        <div class="mb-2">
                                            <span class="badge bg-@statusClass">
                                                <i class="bi bi-check-circle me-1"></i>@(entry.WorkStatusId switch { 0 => "Pending", 1 => "Accepted", 2 => "Rejected", _ => "Unknown" })
                                            </span>
                                        </div>
                                        <div class="btn-group btn-group-sm">
                                            <div class="btn-group btn-group-sm">
                                                @if (entry.WorkStatusId == 0)
                                                {
                                                    <button class="btn btn-outline-primary" title="Edit" onclick="prepareEditForm(@entry.TimeSheetId, '@entry.TaskId', '@entry.StartTime.ToString("yyyy-MM-dd")', '@entry.StartTime.ToString("HH:mm")', '@(entry.EndTime?.ToString("HH:mm") ?? "")', '@entry.Notes.Replace("'", "\\'")')">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger" title="Delete" onclick="deleteTimesheet(@entry.TimeSheetId)">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }

            <div class="text-center mb-4">
                <button class="btn btn-outline-primary">
                    <i class="bi bi-arrow-down-circle me-2"></i>Load More Entries
                </button>
            </div>
        </div>
    </div>
</div>
<script>
        async function deleteTimesheet(timesheetId) {
        if (!confirm('Are you sure you want to delete this timesheet entry? This action cannot be undone.')) {
            return;
        }

        try {
            const response = await fetch(`delete-entry/${timesheetId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            const result = await response.json();
            if (result.success) {
                alert(result.message);
                window.location.reload(); // Refresh the page to reflect the deletion
            } else {
                alert(result.message);
            }
        } catch (error) {
            console.error('Error:', error);
            alert('An error occurred while deleting the timesheet.');
        }
    }
    document.addEventListener('DOMContentLoaded', function() {
        setToday();
        document.getElementById('startTime').addEventListener('change', calculateDuration);
        document.getElementById('endTime').addEventListener('change', calculateDuration);

        const quickSelectButtons = document.querySelectorAll('.date-navigation .btn');
        quickSelectButtons.forEach(button => {
            button.addEventListener('click', function() {
                quickSelectButtons.forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
            });
        });

        const searchInput = document.querySelector('#searchInput');
        const timeEntries = document.querySelectorAll('.time-entry-card');
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            timeEntries.forEach(entry => {
                const text = entry.textContent.toLowerCase();
                const parentDate = entry.closest('.mb-4');
                if (text.includes(searchTerm)) {
                    entry.style.display = '';
                } else {
                    entry.style.display = 'none';
                }
            });
            document.querySelectorAll('.mb-4').forEach(dateSection => {
                const visibleEntries = dateSection.querySelectorAll('.time-entry-card:not([style*="display: none"])');
                if (visibleEntries.length === 0 && dateSection.querySelector('.time-entry-card')) {
                    dateSection.style.display = 'none';
                } else {
                    dateSection.style.display = '';
                }
            });
        });

        const filterSelects = document.querySelectorAll('.date-navigation select');
            filterSelects.forEach(select => {
            select.addEventListener('change', function() {
            console.log('Submitting form with:', this.name, this.value);
            select.closest('form').submit();
        });
    });
    });

    function prepareAddForm() {
        document.getElementById('timesheetModalLabel').textContent = 'Add New Timesheet Entry';
        document.getElementById('timesheetForm').reset();
        document.getElementById('timesheetId').value = '';
        document.getElementById('taskPreview').style.display = 'none';
        calculateDuration();
        setToday();
        document.querySelectorAll('.is-valid, .is-invalid').forEach(el => {
            el.classList.remove('is-valid', 'is-invalid');
        });
        document.getElementById('saveButton').setAttribute('onclick', 'saveTimesheet()');
        const modal = new bootstrap.Modal(document.getElementById('timesheetModal'));
        modal.show();
    };

    function prepareEditForm(timesheetId, taskId, date, startTime, endTime, notes) {
        document.getElementById('timesheetModalLabel').textContent = 'Edit Timesheet Entry';
        document.getElementById('timesheetForm').reset();
        document.getElementById('timesheetId').value = timesheetId;
        document.getElementById('taskSelect').value = taskId;
        document.getElementById('workDate').value = date;
        document.getElementById('startTime').value = startTime;
        document.getElementById('endTime').value = endTime;
        document.getElementById('workNotes').value = notes;
        calculateDuration();
        document.querySelectorAll('.is-valid, .is-invalid').forEach(el => {
            el.classList.remove('is-valid', 'is-invalid');
        });
        document.getElementById('saveButton').setAttribute('onclick', 'saveTimesheet(true)');
        const modal = new bootstrap.Modal(document.getElementById('timesheetModal'));
        modal.show();
    }


    function calculateDuration() {
        const startTime = document.getElementById('startTime').value;
        const endTime = document.getElementById('endTime').value;
        const durationDisplay = document.getElementById('durationDisplay');

        if (startTime && endTime) {
            const start = new Date(`2000-01-01T${startTime}`);
            const end = new Date(`2000-01-01T${endTime}`);
            if (end > start) {
                const diffMs = end - start;
                const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
                const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
                durationDisplay.innerHTML = `<i class="bi bi-stopwatch me-2"></i>Duration: ${diffHours}:${diffMinutes.toString().padStart(2, '0')} hours`;
                durationDisplay.className = 'duration-display text-center text-success';
            } else {
                durationDisplay.innerHTML = `<i class="bi bi-exclamation-triangle me-2"></i>End time must be after start time`;
                durationDisplay.className = 'duration-display text-center text-danger';
            }
        } else {
            durationDisplay.innerHTML = `<i class="bi bi-stopwatch me-2"></i>Duration: --:-- hours`;
            durationDisplay.className = 'duration-display text-center';
        }
    }

    function setCurrentTime(type) {
        const now = new Date();
        const timeString = now.toTimeString().slice(0, 5);
        if (type === 'start') {
            document.getElementById('startTime').value = timeString;
        } else if (type === 'end') {
            document.getElementById('endTime').value = timeString;
        }
        calculateDuration();
    }

    function setToday() {
        const today = new Date();
        const dateString = today.toISOString().split('T')[0];
        document.getElementById('workDate').value = dateString;
    }

    function validateForm() {
        const form = document.getElementById('timesheetForm');
        const inputs = form.querySelectorAll('[required]');
        let isValid = true;

        inputs.forEach(input => {
            if (!input.value.trim()) {
                input.classList.add('is-invalid');
                isValid = false;
            } else {
                input.classList.remove('is-invalid');
                input.classList.add('is-valid');
            }
        });

        const startTime = document.getElementById('startTime').value;
        const endTime = document.getElementById('endTime').value;
        if (startTime && endTime) {
            const start = new Date(`2000-01-01T${startTime}`);
            const end = new Date(`2000-01-01T${endTime}`);
            if (end <= start) {
                document.getElementById('endTime').classList.add('is-invalid');
                isValid = false;
            }
        }
        return isValid;
    }
        async function saveTimesheet(isEdit = false) {
        if (!validateForm()) {
            return;
        }

        const formData = {
            taskId: parseInt(document.getElementById('taskSelect').value),
            date: document.getElementById('workDate').value,
            startTime: document.getElementById('startTime').value,
            endTime: document.getElementById('endTime').value,
            notes: document.getElementById('workNotes').value
        };

        const timesheetId = document.getElementById('timesheetId').value;
        // Use explicit base URLs matching the controller routes
        const baseUrl = {
            addEntry: '/timesheet/add-entry', // Matches AddEntry route
            editEntry: '/timesheet/edit-entry' // Matches EditEntry route
        };
        const url = isEdit ? `${baseUrl.editEntry}/${timesheetId}` : baseUrl.addEntry;

        // Validate timesheetId for edit
        if (isEdit && (!timesheetId || isNaN(parseInt(timesheetId)))) {
            alert('Invalid timesheet ID.');
            return;
        }

        // For edit, exclude timesheetId from the body since it's in the URL
        const body = isEdit ? formData : formData;

        console.log('Request URL:', url); // Debug the URL
        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body)
            });

            if (response.ok) {
                alert(isEdit ? 'Timesheet entry updated successfully!' : 'Timesheet entry saved successfully!');
                document.getElementById('timesheetForm').reset();
                document.getElementById('taskPreview').style.display = 'none';
                calculateDuration();
                setToday();
                const modal = bootstrap.Modal.getInstance(document.getElementById('timesheetModal'));
                modal.hide();
                window.location.reload();
            } else {
                const error = await response.json();
                alert(error.error || (isEdit ? 'Error updating timesheet entry.' : 'Error saving timesheet entry.'));
            }
        } catch (error) {
            console.error('Error:', error);
            alert('An error occurred while processing the entry.');
        }
    }

    document.getElementById('timesheetModal').addEventListener('hidden.bs.modal', function() {
        document.getElementById('timesheetForm').reset();
        document.getElementById('timesheetId').value = '';
        document.getElementById('taskPreview').style.display = 'none';
        document.querySelectorAll('.is-valid, .is-invalid').forEach(el => {
            el.classList.remove('is-valid', 'is-invalid');
        });
        calculateDuration();
        setToday();
    });
</script>